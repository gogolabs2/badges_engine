require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BadgesEngine::AssertionsController, :type => :controller do
  
  # This should return the minimal set of attributes required to create a valid
  # Assertion. As you add validations to Assertion, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:user_id=>1, :badge_id=>1}
  end
  
  def url_options(opts={})
    {:use_route => :badges}.merge(opts)
  end

  describe "GET index" do
    it "assigns all assertions as @assertions" do
      assertion = BadgesEngine::Assertion.create! valid_attributes
      get :index, url_options
      expect(assigns(:assertions)).to eq([assertion])
    end
  end

  describe "GET show" do
    it "assigns the requested assertion as @assertion" do
      assertion = BadgesEngine::Assertion.create! valid_attributes
      get :show, url_options(:id => assertion.id.to_s)
      expect(assigns(:assertion)).to eq(assertion)
    end
  end

  describe "GET new" do
    it "assigns a new assertion as @assertion" do
      get :new, url_options
      expect(assigns(:assertion)).to be_a_new(BadgesEngine::Assertion)
    end
  end

  describe "GET edit" do
    it "assigns the requested assertion as @assertion" do
      assertion = BadgesEngine::Assertion.create! valid_attributes
      get :edit, url_options(:id => assertion.id.to_s)
      expect(assigns(:assertion)).to eq(assertion)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Assertion" do
        expect {
          post :create, url_options(:assertion => valid_attributes)
        }.to change(BadgesEngine::Assertion, :count).by(1)
      end

      it "assigns a newly created assertion as @assertion" do
        post :create, url_options(:assertion => valid_attributes)
        expect(assigns(:assertion)).to be_a(BadgesEngine::Assertion)
        expect(assigns(:assertion)).to be_persisted
      end

      it "redirects to the created assertion" do
        post :create, url_options(:assertion => valid_attributes)
        expect(response).to redirect_to(BadgesEngine::Assertion.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved assertion as @assertion" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(BadgesEngine::Assertion).to receive(:save).and_return(false)
        post :create, url_options(:assertion => {})
        expect(assigns(:assertion)).to be_a_new(BadgesEngine::Assertion)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(BadgesEngine::Assertion).to receive(:save).and_return(false)
        post :create, url_options(:assertion => {})
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested assertion" do
        assertion = BadgesEngine::Assertion.create! valid_attributes
        # Assuming there are no other assertions in the database, this
        # specifies that the Assertion created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        expect_any_instance_of(BadgesEngine::Assertion).to receive(:update_attributes).with({'these' => 'params'})
        put :update, url_options(:id => assertion.id, :assertion => {'these' => 'params'})
      end

      it "assigns the requested assertion as @assertion" do
        assertion = BadgesEngine::Assertion.create! valid_attributes
        put :update, url_options(:id => assertion.id, :assertion => valid_attributes)
        expect(assigns(:assertion)).to eq(assertion)
      end

      it "redirects to the assertion" do
        assertion = BadgesEngine::Assertion.create! valid_attributes
        put :update, url_options(:id => assertion.id, :assertion => valid_attributes)
        expect(response).to redirect_to(assertion)
      end
    end

    describe "with invalid params" do
      it "assigns the assertion as @assertion" do
        assertion = BadgesEngine::Assertion.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(BadgesEngine::Assertion).to receive(:save).and_return(false)
        put :update, url_options(:id => assertion.id.to_s, :assertion => {})
        expect(assigns(:assertion)).to eq(assertion)
      end

      it "re-renders the 'edit' template" do
        assertion = BadgesEngine::Assertion.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(BadgesEngine::Assertion).to receive(:save).and_return(false)
        put :update, url_options(:id => assertion.id.to_s, :assertion => {})
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested assertion" do
      assertion = BadgesEngine::Assertion.create! valid_attributes
      expect {
        delete :destroy, url_options(:id => assertion.id.to_s)
      }.to change(BadgesEngine::Assertion, :count).by(-1)
    end

    it "redirects to the assertions list" do
      assertion = BadgesEngine::Assertion.create! valid_attributes
      delete :destroy, url_options(:id => assertion.id.to_s)
      expect(response).to redirect_to(assertions_path)
    end
  end

end
